const fs = require("fs");
const p = require("path");
const { writeToFile, getFilesFromDir } = require("./utils");
const { exec } = require("child_process");

const makeRootSchemaFile = async (path) => {
  const rootSchema = `
  datasource db { 
    provider = "postgresql"
    url = env("DATASOURCE_URL")
    migrations = "lib/db/migrations"
  }

  generator client {
    provider = "prisma-client-js"
  }
  `;
  await writeToFile(path, rootSchema);
};

const checkFileExists = async (path) => {
  return new Promise((res) => {
    try {
      const exist = fs.existsSync(path);
      res(exist || false);
    } catch {
      res(false);
    }
  });
};

process.on("SIGINT", async () => {
  const rootSchemaDirectory = "lib/db/schemas";
  const schemaPath = `${rootSchemaDirectory}/schema.prisma`;
  const schemaCreated = await checkFileExists(schemaPath);
  if (schemaCreated) {
    fs.unlinkSync(schemaPath);
  }
  process.exit(0);
});

const runMigration = async (
  execPayload,
  prismaExecPath,
  schemaPath,
  migrationName
) => {
  exec(
    `${
      execPayload?.resetMigrations
        ? ` ${prismaExecPath} migrate reset --schema=${schemaPath} --force &&`
        : ""
    } ${prismaExecPath} migrate dev --schema=${schemaPath} --name=${migrationName}`,
    {
      env: {
        ...process.env,
        PATH: process.env.PATH,
        DATASOURCE_URL:
          "postgresql://postgres:postgres@localhost:5432/product-catalog-db?schema=public",
      },
    },
    async (err, stdout, stderr) => {
      console.log("Generate command completed");
      console.log("Error:", err);
      console.log("Stdout:", stdout);
      console.log("Stderr:", stderr);

      if (err) {
        console.log("Generate failed  ", err);
        fs.unlinkSync(schemaPath);
        return;
      }
      if (stderr) {
        console.log("Generate failed ::: ", stderr);
        fs.unlinkSync(schemaPath);
        return;
      }
      if (stdout) {
        console.log("Result :::", { stdout });
      }
      if (!err && !stderr) {
        console.log("Generate completed successfully");
      }
    }
  );
};

const runGenerate = async (prismaExecPath, schemaPath) => {
  const schemaFileExists = fs.existsSync(schemaPath);
  console.log("schemaFileExists :::: ", schemaFileExists);
  exec(
    `${prismaExecPath} generate --schema=${schemaPath}`,
    {
      env: {
        ...process.env,
        PATH: process.env.PATH,
        DATASOURCE_URL:
          "postgresql://postgres:postgres@localhost:5432/product-catalog-db?schema=public",
      },
    },
    async (err, stdout, stderr) => {
      console.log("Migration command completed");
      console.log("Error:", err);
      console.log("Stdout:", stdout);
      console.log("Stderr:", stderr);

      if (err) {
        console.log("Migrate failed  ", err);
        fs.unlinkSync(schemaPath);
        return;
      }
      if (stderr) {
        console.log("Migrate failed ::: ", stderr);
        fs.unlinkSync(schemaPath);
        return;
      }
      if (stdout) {
        console.log("Result :::", { stdout });
      }
      if (!err && !stderr) {
        console.log("Migration completed successfully");
      }
    }
  );
};

const startProcess = async (execPayload) => {
  const rootSchemaPath = "root.schema.prisma";
  const rootSchemaDirectory = "lib/db/schemas";
  const schemaPath = `${rootSchemaDirectory}/schema.prisma`;

  const hasSchemaFile = await checkFileExists(schemaPath);
  console.log("hasSchemaFile", hasSchemaFile);
  if (hasSchemaFile) {
    fs.unlinkSync(schemaPath);
  }

  const schemaFiles = await getFilesFromDir(rootSchemaDirectory);

  const hasRootSchema = fs.existsSync(rootSchemaPath);
  if (!hasRootSchema) {
    await makeRootSchemaFile(rootSchemaPath);
  }

  const rootSchema = fs.readFileSync(
    `${rootSchemaDirectory}/${rootSchemaPath}`
  );
  const schemaPaths = schemaFiles.filter((path) => path !== rootSchemaPath);

  const schemaContentArr = schemaPaths.map((path) => {
    return fs.readFileSync(`${rootSchemaDirectory}/${path}`, "utf-8");
  });
  const schemaStr = [
    "// this file is auto-generated by the generate-db-schema. do not make any manual changes",
    rootSchema,
    ...schemaContentArr,
  ].join("\n\n");

  fs.writeFileSync(schemaPath, schemaStr, "utf-8");

  const prismaExecPath = p.resolve(process.cwd(), "node_modules/.bin/prisma");

  const migrationName = `migration-${new Date().getTime()}`;

  const schemaFileExists = fs.existsSync(schemaPath);
  if (schemaFileExists) {
    if (execPayload.generate) {
      return await runGenerate(prismaExecPath, schemaPath);
    } else {
      return await runMigration(
        execPayload,
        prismaExecPath,
        schemaPath,
        migrationName
      );
    }
  }
};

function getExecPayload() {
  const payload = {
    resetMigrations: false,
    generate: false,
  };

  payload.resetMigrations = process.argv.some(
    (arg) => arg === "--reset-migration"
  );

  payload.generate = process.argv.some((arg) => arg === "--generate");

  return payload;
}

async function main() {
  try {
    const executionPayload = getExecPayload();
    await startProcess(executionPayload);
  } catch (error) {
    console.log("Error generating schema   ", error);
  }
}

main();
